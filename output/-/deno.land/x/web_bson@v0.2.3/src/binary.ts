import{UUID as n}from"/-/deno.land/x/web_bson@v0.2.3/src/uuid.ts?v=l7tvw53z";import{BSONError as f,BSONTypeError as b}from"/-/deno.land/x/web_bson@v0.2.3/src/error.ts?v=l7tvw53z";import{b64 as T}from"/-/deno.land/x/web_bson@v0.2.3/deps.ts?v=l7tvw53z";import{uuidHexStringToBuffer as s}from"/-/deno.land/x/web_bson@v0.2.3/src/uuid_utils.ts?v=l7tvw53z";var U;(function(t){t[t.BUFFER_SIZE=256]="BUFFER_SIZE",t[t.SUBTYPE_DEFAULT=0]="SUBTYPE_DEFAULT",t[t.SUBTYPE_FUNCTION=1]="SUBTYPE_FUNCTION",t[t.SUBTYPE_BYTE_ARRAY=2]="SUBTYPE_BYTE_ARRAY",t[t.SUBTYPE_UUID=4]="SUBTYPE_UUID",t[t.SUBTYPE_MD5=5]="SUBTYPE_MD5",t[t.SUBTYPE_ENCRYPTED=6]="SUBTYPE_ENCRYPTED",t[t.SUBTYPE_COLUMN=7]="SUBTYPE_COLUMN",t[t.SUBTYPE_USER_DEFINE=128]="SUBTYPE_USER_DEFINE",t[t.BSON_BINARY_SUBTYPE_DEFAULT=0]="BSON_BINARY_SUBTYPE_DEFAULT"})(U||(U={}));var p=new TextDecoder,_=Symbol.for("Deno.customInspect"),E=class{length(){return this.buffer.length}toJSON(){return T.encode(this.buffer)}toString(){return p.decode(this.buffer)}toUUID(){if(this.subType===4)return new n(this.buffer);throw new f(`Binary sub_type "${this.subType}" is not supported for converting to UUID. Only "4" is currently supported.`)}toExtendedJSON(e){e=e||{};let o=T.encode(this.buffer),r=Number(this.subType).toString(16);return{$binary:{base64:o,subType:r.length===1?"0"+r:r}}}static fromExtendedJSON(e,o){o=o||{};let r,u;if("$binary"in e?typeof e.$binary!="string"&&(u=e.$binary.subType?parseInt(e.$binary.subType,16):0,r=T.decode(e.$binary.base64)):"$uuid"in e&&(u=4,r=s(e.$uuid)),!r)throw new b(`Unexpected Binary Extended JSON format ${JSON.stringify(e)}`);return new E(r,u)}[_](){return this.subType===0?`new Binary(${Deno.inspect(this.buffer)})`:`new Binary(${Deno.inspect(this.buffer)}, ${this.subType})`}constructor(e,o=0){this._bsontype="Binary",this.buffer=void 0,this.subType=void 0,this.buffer=e,this.subType=o}};export{E as Binary,U as BinarySizes};
