import{BSONError as s}from"/-/deno.land/x/web_bson@v0.2.3/src/error.ts?v=l7tvw53z";function e(r){return r.split("").sort().join("")}var p=Symbol.for("Deno.customInspect"),n=class{static parseOptions(t){return t?t.split("").sort().join(""):""}[p](){return`new BSONRegExp("${this.pattern}")`}toExtendedJSON(t){return t=t||{},{$regularExpression:{pattern:this.pattern,options:this.options}}}static fromExtendedJSON(t){return new n(t.$regularExpression.pattern,n.parseOptions(t.$regularExpression.options))}constructor(t,i){if(this.pattern=void 0,this.options=void 0,this._bsontype="BSONRegExp",this.pattern=t,this.options=e(i!=null?i:""),this.pattern.indexOf("\0")!==-1)throw new s(`BSON Regex patterns cannot contain null bytes, found: ${JSON.stringify(this.pattern)}`);if(this.options.indexOf("\0")!==-1)throw new s(`BSON Regex options cannot contain null bytes, found: ${JSON.stringify(this.options)}`);for(let o=0;o<this.options.length;o++)if(!(this.options[o]==="i"||this.options[o]==="m"||this.options[o]==="x"||this.options[o]==="l"||this.options[o]==="s"||this.options[o]==="u"))throw new s(`The regular expression option [${this.options[o]}] is not supported`)}};export{n as BSONRegExp};
