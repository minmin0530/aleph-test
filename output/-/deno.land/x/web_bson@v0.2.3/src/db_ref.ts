import{isObjectLike as n}from"/-/deno.land/x/web_bson@v0.2.3/src/parser/utils.ts?v=l7tvw53z";function c(e){return n(e)&&e.$id!=null&&typeof e.$ref=="string"&&(e.$db==null||typeof e.$db=="string")}var h=Symbol.for("Deno.customInspect"),s=class{toJSON(){let t=Object.assign({$ref:this.collection,$id:this.oid},this.fields);return this.db!=null&&(t.$db=this.db),t}toExtendedJSON(t){t=t||{};let i={$ref:this.collection,$id:this.oid};return t.legacy?i:(this.db&&(i.$db=this.db),i=Object.assign(i,this.fields))}static fromExtendedJSON(t){let i=Object.assign({},t);return delete i.$ref,delete i.$id,delete i.$db,new s(t.$ref,t.$id,t.$db,i)}[h](){let t=this.oid===void 0||this.oid.toString===void 0?this.oid:this.oid.toString();return`new DBRef("${this.collection}", new ObjectId("${t}")${this.db?`, "${this.db}"`:""})`}constructor(t,i,o,l){this._bsontype="DBRef",this.collection=void 0,this.oid=void 0,this.db=void 0,this.fields=void 0;let d=t.split(".");d.length===2&&(o=d.shift(),t=d.shift()),this.collection=t,this.oid=i,this.db=o,this.fields=l||{}}};export{s as DBRef,c as isDBRefLike};
