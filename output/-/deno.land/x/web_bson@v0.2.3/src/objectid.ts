import{decodeHexString as l,encodeHexString as g}from"/-/deno.land/x/web_bson@v0.2.3/utils.ts?v=l7tvw53z";import{BSONTypeError as f}from"/-/deno.land/x/web_bson@v0.2.3/src/error.ts?v=l7tvw53z";import{randomBytes as w}from"/-/deno.land/x/web_bson@v0.2.3/src/parser/utils.ts?v=l7tvw53z";import{equals as y}from"/-/deno.land/x/web_bson@v0.2.3/deps.ts?v=l7tvw53z";function s(u,e){if(!Object.prototype.hasOwnProperty.call(u,e))throw new TypeError("attempted to use private field on non-instance");return u[e]}var p=0;function d(u){return"__private_"+p+++"_"+u}var c=new TextEncoder,m=new TextDecoder,x=RegExp("^[0-9a-fA-F]{24}$"),a=null,h=d("_index"),o=d("_id"),n=d("_bytesBuffer"),S=Symbol.for("Deno.customInspect"),r=class{get id(){return s(this,n)[n]}set id(e){s(this,n)[n]=e,r.cacheHexString&&(s(this,o)[o]=g(e))}toHexString(){if(r.cacheHexString&&s(this,o)[o])return s(this,o)[o];let e=g(this.id);return r.cacheHexString&&!s(this,o)[o]&&(s(this,o)[o]=e),e}static generate(e){typeof e!="number"&&(e=Math.floor(Date.now()/1e3));let t=s(this,h)[h]=(s(this,h)[h]+1)%16777215,i=new Uint8Array(12);return new DataView(i.buffer,0,4).setUint32(0,e),a===null&&(a=w(5)),i[4]=a[0],i[5]=a[1],i[6]=a[2],i[7]=a[3],i[8]=a[4],i[11]=255&t,i[10]=t>>8&255,i[9]=t>>16&255,i}toString(){return this.toHexString()}toJSON(){return this.toHexString()}equals(e){if(e==null)return!1;if(e instanceof r)return y(s(this,n)[n],s(e,n)[n]);if(typeof e=="string"&&r.isValid(e)&&e.length===12&&this.id instanceof Uint8Array)return e===m.decode(this.id);if(typeof e=="string"&&r.isValid(e)&&e.length===24)return e.toLowerCase()===this.toHexString();if(typeof e=="string"&&r.isValid(e)&&e.length===12){let t=c.encode(e);for(let i=0;i<12;i++)if(t[i]!==this.id[i])return!1;return!0}return!1}getTimestamp(){let e=new Date,t=new DataView(this.id.buffer,0,4).getUint32(0);return e.setTime(1e3*Math.floor(t)),e}static createFromTime(e){let t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return new DataView(t.buffer,0,4).setUint32(0,e),new r(t)}static createFromHexString(e){if(e===void 0||e!=null&&e.length!==24)throw new f("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");return new r(l(e))}static isValid(e){if(e==null)return!1;try{return new r(e),!0}catch(t){return!1}}toExtendedJSON(){return{$oid:this.toHexString()}}static fromExtendedJSON(e){return new r(e.$oid)}[S](){return`new ObjectId("${this.toHexString()}")`}constructor(e=r.generate()){this._bsontype="ObjectID",Object.defineProperty(this,o,{writable:!0,value:void 0}),Object.defineProperty(this,n,{writable:!0,value:void 0});let t;if(typeof e=="object"&&e&&"id"in e){if(typeof e.id!="string"&&!ArrayBuffer.isView(e.id))throw new f("Argument passed in must have an id that is of type string or Buffer");t="toHexString"in e&&typeof e.toHexString=="function"?l(e.toHexString()):e.id}else t=e;if(t==null||typeof t=="number")s(this,n)[n]=new Uint8Array(r.generate(typeof t=="number"?t:void 0));else if(ArrayBuffer.isView(t)&&t.byteLength===12)s(this,n)[n]=t;else if(typeof t=="string")if(t.length===12){let i=c.encode(t);if(i.byteLength===12)s(this,n)[n]=i;else throw new f("Argument passed in must be a string of 12 bytes")}else if(t.length===24&&x.test(t))s(this,n)[n]=l(t);else throw new f("Argument passed in must be a string of 12 bytes or a string of 24 hex characters");else throw new f("Argument passed in does not match the accepted types");r.cacheHexString&&(s(this,o)[o]=g(this.id))}};Object.defineProperty(r,h,{writable:!0,value:Math.floor(16777215*Math.random())}),r.cacheHexString=void 0;export{r as ObjectId};
