var i=Symbol.for("Deno.customInspect"),r=class{valueOf(){return this.value}toJSON(){return this.value}toString(e){return this.value.toString(e)}toExtendedJSON(e){if(e&&e.relaxed&&isFinite(this.value))return this.value;if(Object.is(Math.sign(this.value),-0))return{$numberDouble:`-${this.value.toFixed(1)}`};let t;return Number.isInteger(this.value)?(t=this.value.toFixed(1)).length>=13&&(t=this.value.toExponential(13).toUpperCase()):t=this.value.toString(),{$numberDouble:t}}static fromExtendedJSON(e,t){let u=parseFloat(e.$numberDouble);return t&&t.relaxed?u:new r(u)}[i](){return`new Double(${this.toJSON()})`}constructor(e){this._bsontype="Double",this.value=void 0,e instanceof Number&&(e=e.valueOf()),this.value=+e}};export{r as Double};
